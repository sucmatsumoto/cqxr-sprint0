<?php

/**
 * サービスサーバ
 * アプリ向けインタフェース  ・アップデート情報  ・コンテンツ情報  ・ユーザ情報  コミュニケーション基盤向けインタフェース  ・ユーザ情報
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class ContentController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation getAssetbundle
     *
     * AssetBundle取得.
     *
     *
     * @return Http response
     */
    public function getAssetbundle()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['authorization'])) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getAssetbundle');
        }
        if (strlen($input['authorization']) > 40) {
            throw new \InvalidArgumentException('invalid length for $authorization when calling ContentController.getAssetbundle, must be smaller than or equal to 40.');
        }
        if (strlen($input['authorization']) < 40) {
            throw new \InvalidArgumentException('invalid length for $authorization when calling ContentController.getAssetbundle, must be bigger than or equal to 40.');
        }
        $authorization = $input['authorization'];

        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling getAssetbundle');
        }
        $contentType = $input['contentType'];

        $getAssetbundleRequest = $input['getAssetbundleRequest'];


        return response('How about implementing getAssetbundle as a post method ?');
    }
    /**
     * Operation map
     *
     * 広域マップ情報取得.
     *
     * @param string $spaceId V万博エリアの空間ID ※ランダムな6桁の数値の先頭に「SS-」を付与した一意のID (required)
     *
     * @return Http response
     */
    public function map($spaceId)
    {
        $input = Request::all();

        //path params validation
        if (strlen($spaceId) > 9) {
            throw new \InvalidArgumentException('invalid length for $spaceId when calling ContentController.map, must be smaller than or equal to 9.');
        }
        if (strlen($spaceId) < 9) {
            throw new \InvalidArgumentException('invalid length for $spaceId when calling ContentController.map, must be bigger than or equal to 9.');
        }


        //not path params validation

        return response('How about implementing map as a get method ?');
    }
    /**
     * Operation spaceAccessList
     *
     * 空間アクセスリスト取得.
     *
     *
     * @return Http response
     */
    public function spaceAccessList()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['authorization'])) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling spaceAccessList');
        }
        if (strlen($input['authorization']) > 40) {
            throw new \InvalidArgumentException('invalid length for $authorization when calling ContentController.spaceAccessList, must be smaller than or equal to 40.');
        }
        if (strlen($input['authorization']) < 40) {
            throw new \InvalidArgumentException('invalid length for $authorization when calling ContentController.spaceAccessList, must be bigger than or equal to 40.');
        }
        $authorization = $input['authorization'];

        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling spaceAccessList');
        }
        $contentType = $input['contentType'];

        if (!isset($input['spaceLevel'])) {
            throw new \InvalidArgumentException('Missing the required parameter $spaceLevel when calling spaceAccessList');
        }
        $spaceLevel = $input['spaceLevel'];

        $spaceId = $input['spaceId'];


        return response('How about implementing spaceAccessList as a get method ?');
    }
    /**
     * Operation spaceInfo
     *
     * 空間メタ情報取得.
     *
     * @param string $spaceId ※ランダムな6桁の数値の先頭に「SS-」を付与した一意のID (required)
     *
     * @return Http response
     */
    public function spaceInfo($spaceId)
    {
        $input = Request::all();

        //path params validation
        if (strlen($spaceId) > 9) {
            throw new \InvalidArgumentException('invalid length for $spaceId when calling ContentController.spaceInfo, must be smaller than or equal to 9.');
        }
        if (strlen($spaceId) < 9) {
            throw new \InvalidArgumentException('invalid length for $spaceId when calling ContentController.spaceInfo, must be bigger than or equal to 9.');
        }


        //not path params validation

        return response('How about implementing spaceInfo as a get method ?');
    }
    /**
     * Operation transitionInfo
     *
     * 遷移情報取得.
     *
     *
     * @return Http response
     */
    public function transitionInfo()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['authorization'])) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling transitionInfo');
        }
        if (strlen($input['authorization']) > 40) {
            throw new \InvalidArgumentException('invalid length for $authorization when calling ContentController.transitionInfo, must be smaller than or equal to 40.');
        }
        if (strlen($input['authorization']) < 40) {
            throw new \InvalidArgumentException('invalid length for $authorization when calling ContentController.transitionInfo, must be bigger than or equal to 40.');
        }
        $authorization = $input['authorization'];

        if (!isset($input['contentType'])) {
            throw new \InvalidArgumentException('Missing the required parameter $contentType when calling transitionInfo');
        }
        $contentType = $input['contentType'];

        $transitionInfoRequest = $input['transitionInfoRequest'];


        return response('How about implementing transitionInfo as a post method ?');
    }
}
